"""
Django settings for gps_tracks project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import mimetypes
from envparse import env

mimetypes.add_type("image/svg+xml", ".svg", True)


USE_TZ = False
TIME_ZONE="UTC"
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "rov&8f^+p3ke%iwzp9zuom1fa2a#v)8%uatk^_gpw0)22x^nu#"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'dal',
    'dal_select2',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "tracks.apps.TracksConfig",
    "leaflet",
    "svg",
    "mathfilters",
    "django_extensions",
  # "debug_toolbar",
    'crispy_forms',
    #my apps
    "googletimeline",
    "import_app",
    "export",
    "download",
    "geopy_app",
    "help_app",
    "quick_import",
    "serialize",
    "geojson_obj",
    "lines",
    "photos",
    "users",
    "groups",
    "waypoints",
    "blacklists",
    "splits_laps",
    "many_tracks",
    "logger",
    "base",
    "options",
    "json_views",
    "merge_tracks"
]

MIDDLEWARE = [
    #"debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "gps_tracks.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, 'import', 'templates'),

            ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "base.views.context_base_settings",
            ]
        },
    }
]

WSGI_APPLICATION = "gps_tracks.wsgi.application"


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# quick choice sqlite/postgres
DB_TYPE=env('DB_TYPE',cast=str,default='postgres').strip()
DB_NAME=env('DB_NAME',cast=str,default='').strip()

if ".sqlite3" in DB_NAME:
    DB_TYPE="sqlite"

if DB_TYPE=="sqlite":
    DB_ENGINE = 'django.db.backends.sqlite3'
    USE_TEXT_INSTEAD_OF_ARRAYS=True
# with postgres, and only postgres, use array fields
elif DB_TYPE=="postgres":
    DB_ENGINE = "django.db.backends.postgresql"
    USE_TEXT_INSTEAD_OF_ARRAYS=False
# if not quick choice, read DB_ENGINE
else:
    DB_ENGINE=env('DB_ENGINE',cast=str,default='django.db.backends.sqlite3')
    if DB_ENGINE=="django.db.backends.postgresql":
        USE_TEXT_INSTEAD_OF_ARRAYS=False
    else:
        USE_TEXT_INSTEAD_OF_ARRAYS=True

# read db name
if DB_ENGINE == "django.db.backends.postgresql":
    DB_NAME=env('DB_NAME',cast=str,default='gps_tracks').strip()
    DB_USER=env('DB_USER',cast=str,default='postgres').strip()
    DB_PASSWORD=env('DB_PASSWORD',cast=str,default='postgres').strip()
    DB_HOST=env('DB_HOST',cast=str,default='localhost').strip()
    DB_PORT=env('DB_PORT',cast=str,default='').strip()
    DB_NAME_TEST=env('DB_NAME_TEST',cast=str,default='gps_tracks_test').strip()
elif DB_ENGINE == 'django.db.backends.sqlite3':
    DB_NAME=env('DB_NAME',cast=str,default='gps_tracks.sqlite3').strip()
    DB_USER=env('DB_USER',cast=str,default='').strip()
    DB_PASSWORD=env('DB_PASSWORD',cast=str,default='').strip()
    DB_HOST=env('DB_HOST',cast=str,default='').strip()
    DB_PORT=env('DB_PORT',cast=str,default='').strip()
    DB_NAME_TEST=env('DB_NAME_TEST',cast=str,default='gps_tracks_test.sqlite3').strip()
else:
    DB_NAME=env('DB_NAME',cast=str).strip()
    DB_USER=env('DB_USER',cast=str,default='').strip()
    DB_PASSWORD=env('DB_PASSWORD',cast=str,default='').strip()
    DB_HOST=env('DB_HOST',cast=str,default='').strip()
    DB_PORT=env('DB_PORT',cast=str,default='').strip()
    DB_NAME_TEST=env('DB_NAME_TEST',cast=str,default='gps_tracks_test').strip()

print("USE_TEXT_INSTEAD_OF_ARRAYS",USE_TEXT_INSTEAD_OF_ARRAYS)
print("DB_TYPE",DB_TYPE)
print("DB_ENGINE",DB_ENGINE)
print("DB_NAME",DB_NAME)
print("DB_USER",DB_USER)
print("DB_PASSWORD",DB_PASSWORD)
print("DB_HOST",DB_HOST)
print("DB_PORT",DB_PORT)
print("DB_NAME_TEST",DB_NAME_TEST)

DATABASES = {
    "default": {
        "ENGINE": DB_ENGINE,
        "NAME": DB_NAME,
        "USER": DB_USER,
        "PASSWORD": DB_PASSWORD,
        "HOST": DB_HOST,
        "PORT": DB_PORT,
        'TEST': {
            'NAME': DB_NAME_TEST,
        },
    }
}
 

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'TIMEOUT':30,
    }
}

LEAFLET_CONFIG = {
    'MINIMAP': False,
    'RESET_VIEW': True,
    'ATTRIBUTION_PREFIX': ''
}

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = "en-us"

#TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/


##PATHS
STATIC_URL = "/static/"
MEDIA_URL = "/media/"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"), os.path.join(BASE_DIR, "media"))
TRACKS_DIR = os.path.join(BASE_DIR, "media", "input_files")
PHOTOS_DIR = os.path.join(BASE_DIR, "media", "Camera")
EXPORT_DIR = os.path.join(BASE_DIR, "media", "export")
MEDIA_BASE_DIR = os.path.join(BASE_DIR, "media")
MEDIA_ROOT = os.path.join(BASE_DIR, "media", "upload")
MULTITRACK_ROOT = os.path.join(BASE_DIR, "media", "input_files", "multitrack")
SVG_DIRS=[os.path.join(BASE_DIR, 'media',"svg")]
LOGS_DIR= os.path.join(BASE_DIR, "media","logs")


# import dj_database_url
# DATABASES['default'] = dj_database_url.config()
# DATABASES['default']['ENGINE'] = 'django.contrib.gis.db.backends.postgis'

# django.contrib.gis.db.backends.postgis

# GEOS_LIBRARY_PATH='C:\Program Files\PostgreSQL\10\bin'




INTERNAL_IPS = ["127.0.0.1"]



CRISPY_TEMPLATE_PACK = 'bootstrap4'

import datetime

SHOW_GOOGLE_TIMELINE=env('SHOW_GOOGLE_TIMELINE',cast=bool,default=False)
SHOW_GOOGLE_MAPS=env('SHOW_GOOGLE_MAPS',cast=bool,default=False)

import sys
today=datetime.datetime.now().strftime("%Y%m%d")


LOGGING = {
    'version': 1,

    'disable_existing_loggers': False,

    'formatters': {
        'verbose': {
            'format': '%(levelname)s\t%(asctime)s\t%(filename)s\t%(funcName)s\t%(lineno)s\t%(message)s',
  #          'style': '{',
        },
        'simple': {
            'format': '%(levelname)s %(message)s',
            #'style': '{',
        },
    },

    'handlers': {
        'file_info': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR,today+"_info.log"),
            'formatter': 'verbose',
            "encoding": "utf-8"
        },
        'file_debug': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, today+"_debug.log"),
            'formatter': 'verbose',
            "encoding": "utf-8"
        },
        'file_warning': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR,today+"_warning.log"),
            'formatter': 'verbose',
            "encoding": "utf-8"
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, today+"_error.log"),
            'formatter': 'verbose',
            "encoding": "utf-8"
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'simple',
        }
    },

    'loggers': {
        'gps_tracks': {
            'handlers': ['file_debug','file_info','file_warning',"file_error",'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'WARNING',
        },
    },

}

DATA_UPLOAD_MAX_NUMBER_FIELDS=100000

